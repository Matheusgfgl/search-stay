name: Staging Docker Build & ECR Upload

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches-ignore: [master]
  workflow_dispatch:

jobs:
  build-upload:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, '#gerar-build'))
    outputs:
      RELEASE_NUMBER: ${{ env.RELEASE_NUMBER }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configuring AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login on Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Getting the image tag
      run: if [ ${{ github.event_name }} = 'pull_request' ]; then tag=pr-${{ github.event.number }}; else tag='staging'; fi; echo IMAGE_TAG=$tag >> $GITHUB_ENV

    - name: Getting the complete ECR URI
      run: echo ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ env.IMAGE_TAG }} >> $GITHUB_ENV

    - name: Build, and push image to Amazon ECR
      run: |
        docker build --build-arg ENVIRONMENT_BUILD=staging -f docker/Dockerfile -t ${{ env.ECR_URI }} .
        docker push ${{ env.ECR_URI }}

    - name: Commenting the image url on PR
      uses: mshick/add-pr-comment@v1
      if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'labeled')
      with:
        message: |
          **URI da imagem para homologação:** ${{ env.ECR_URI }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}